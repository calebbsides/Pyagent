import os
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
import openai

app = FastAPI()

class OpenAIRequest(BaseModel):
    prompt: str

@app.get("/")
def read_root():
    return {"message": "Hello, World!"}

"""
POST /openai/completion

Request Body (JSON):
    {
        "prompt": "<string>"
    }

Description:
    Accepts a prompt string and returns a completion generated by OpenAI's GPT-3.5-turbo model.
    Requires the OPENAI_API_KEY environment variable to be set.

Response (JSON):
    {
        "response": "<string>"  # The generated completion from the model
    }

Errors:
    500: If the API key is not set or if there is an error from OpenAI API.
"""
@app.post("/openai/completion")
def openai_completion(request: OpenAIRequest):
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        raise HTTPException(status_code=500, detail="OPENAI_API_KEY not set in environment.")
    openai.api_key = api_key
    try:
        response = openai.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": request.prompt}],
            max_tokens=50
        )
        return {"response": response.choices[0].message.content}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
